{"ast":null,"code":"import { SIGN_UP, SIGN_IN, CHECK_AUTH, SET_LOADING } from \"../actionTypes\";\nimport SecureLS from \"secure-ls\";\nlet ls = new SecureLS({\n  encodingType: \"aes\",\n  isCompression: false\n});\n\nlet _token;\n\nlet _user_id;\n\nlet _is_admin;\n\ntry {\n  _token = ls.get(\"token\");\n  _user_id = ls.get(\"user_id\");\n} catch (error) {}\n\nconst initialState = {\n  isAuthenticated: _token !== null && _token !== \"null\" && _token !== \"\" ? true : false,\n  token: _token || null,\n  user_id: _user_id || null,\n  loading: false,\n  success: null,\n  errors: null\n};\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case SIGN_UP:\n      {\n        return { ...state,\n          success: action.payload.success ? true : false,\n          isAuthenticated: action.payload.success ? true : false,\n          token: action.payload.success ? action.payload.token : null,\n          user_id: action.payload.success ? action.payload.user_id : null,\n          errors: action.payload.success ? null : action.payload.errors\n        };\n      }\n\n    case SIGN_IN:\n      {\n        return { ...state,\n          success: action.payload.success ? true : false,\n          isAuthenticated: action.payload.success ? true : false,\n          token: action.payload.success ? action.payload.token : null,\n          user_id: action.payload.success ? action.payload.user_id : null,\n          errors: action.payload.success ? null : action.payload.errors\n        };\n      }\n\n    case CHECK_AUTH:\n      {\n        return { ...state,\n          isAuthenticated: action.payload.isAuthenticated,\n          token: action.payload.token,\n          user_id: action.payload.user_id\n        };\n      }\n\n    case SET_LOADING:\n      {\n        return { ...state,\n          loading: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/lephuochoang/Hoc/Project/vibo.com/booking/web/src/redux/reducers/auth.reducer.js"],"names":["SIGN_UP","SIGN_IN","CHECK_AUTH","SET_LOADING","SecureLS","ls","encodingType","isCompression","_token","_user_id","_is_admin","get","error","initialState","isAuthenticated","token","user_id","loading","success","errors","auth","state","action","type","payload"],"mappings":"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","sourcesContent":["import { SIGN_UP, SIGN_IN, CHECK_AUTH, SET_LOADING } from \"../actionTypes\";\nimport SecureLS from \"secure-ls\";\n\nlet ls = new SecureLS({ encodingType: \"aes\", isCompression: false });\nlet _token;\nlet _user_id;\nlet _is_admin;\ntry {\n    _token = ls.get(\"token\");\n    _user_id = ls.get(\"user_id\");\n} catch (error) {}\nconst initialState = {\n    isAuthenticated:\n        _token !== null && _token !== \"null\" && _token !== \"\" ? true : false,\n    token: _token || null,\n    user_id: _user_id || null,\n    loading: false,\n    success: null,\n    errors: null\n};\n\nexport default function auth(state = initialState, action) {\n    switch (action.type) {\n        case SIGN_UP: {\n            return {\n                ...state,\n                success: action.payload.success ? true : false,\n                isAuthenticated: action.payload.success ? true : false,\n                token: action.payload.success ? action.payload.token : null,\n                user_id: action.payload.success ? action.payload.user_id : null,\n                errors: action.payload.success ? null : action.payload.errors\n            };\n        }\n        case SIGN_IN: {\n            return {\n                ...state,\n                success: action.payload.success ? true : false,\n                isAuthenticated: action.payload.success ? true : false,\n                token: action.payload.success ? action.payload.token : null,\n                user_id: action.payload.success ? action.payload.user_id : null,\n                errors: action.payload.success ? null : action.payload.errors\n            };\n        }\n        case CHECK_AUTH: {\n            return {\n                ...state,\n                isAuthenticated: action.payload.isAuthenticated,\n                token: action.payload.token,\n                user_id: action.payload.user_id,\n            };\n        }\n        case SET_LOADING: {\n            return {\n                ...state,\n                loading: action.payload\n            };\n        }\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}