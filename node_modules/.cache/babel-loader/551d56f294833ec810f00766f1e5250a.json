{"ast":null,"code":"import { SIGN_UP, SIGN_IN, CHECK_AUTH, SET_LOADING } from \"../actionTypes\";\nimport SecureLS from \"secure-ls\";\nlet ls = new SecureLS({\n  encodingType: \"aes\",\n  isCompression: false\n});\n\nlet _token;\n\nlet _user_id; // let _is_admin;\n\n\ntry {\n  _token = ls.get(\"token\");\n  _user_id = ls.get(\"user_id\"); // _is_admin = ls.get(\"is_admin\");\n} catch (error) {}\n\nconst initialState = {\n  isAuthenticated: _token !== null && _token !== \"null\" && _token !== \"\" ? true : false,\n  token: _token || null,\n  user_id: _user_id || null,\n  // is_admin: _is_admin || false,\n  loading: false\n};\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case SIGN_UP:\n      {\n        return { ...state,\n          isAuthenticated: true,\n          token: action.payload.success ? action.payload.token : null,\n          user_id: action.payload.success ? action.payload.user_id : null,\n          // is_admin: action.payload.success\n          //     ? action.payload.is_admin\n          //     : false,\n          errors: action.payload.success ? null : action.payload.errors\n        };\n      }\n\n    case SIGN_IN:\n      {\n        return { ...state,\n          success: action.payload.success ? true : false,\n          isAuthenticated: action.payload.success ? true : false,\n          token: action.payload.success ? action.payload.token : null,\n          user_id: action.payload.success ? action.payload.user_id : null,\n          // is_admin: action.payload.success\n          //     ? action.payload.is_admin\n          //     : false,\n          errors: action.payload.success ? null : action.payload.errors\n        };\n      }\n\n    case CHECK_AUTH:\n      {\n        return { ...state,\n          isAuthenticated: action.payload.isAuthenticated,\n          token: action.payload.token,\n          user_id: action.payload.user_id // is_admin: action.payload.is_admin,\n\n        };\n      }\n\n    case SET_LOADING:\n      {\n        return { ...state,\n          loading: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/lephuochoang/Hoc/Project/vibo.com/booking/web/src/redux/reducers/auth.reducer.js"],"names":["SIGN_UP","SIGN_IN","CHECK_AUTH","SET_LOADING","SecureLS","ls","encodingType","isCompression","_token","_user_id","get","error","initialState","isAuthenticated","token","user_id","loading","auth","state","action","type","payload","success","errors"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,WAAvC,QAA0D,gBAA1D;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,IAAIC,EAAE,GAAG,IAAID,QAAJ,CAAa;AAAEE,EAAAA,YAAY,EAAE,KAAhB;AAAuBC,EAAAA,aAAa,EAAE;AAAtC,CAAb,CAAT;;AACA,IAAIC,MAAJ;;AACA,IAAIC,QAAJ,C,CACA;;;AACA,IAAI;AACAD,EAAAA,MAAM,GAAGH,EAAE,CAACK,GAAH,CAAO,OAAP,CAAT;AACAD,EAAAA,QAAQ,GAAGJ,EAAE,CAACK,GAAH,CAAO,SAAP,CAAX,CAFA,CAGA;AACH,CAJD,CAIE,OAAOC,KAAP,EAAc,CAAE;;AAClB,MAAMC,YAAY,GAAG;AACjBC,EAAAA,eAAe,EACXL,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,MAA9B,IAAwCA,MAAM,KAAK,EAAnD,GAAwD,IAAxD,GAA+D,KAFlD;AAGjBM,EAAAA,KAAK,EAAEN,MAAM,IAAI,IAHA;AAIjBO,EAAAA,OAAO,EAAEN,QAAQ,IAAI,IAJJ;AAKjB;AACAO,EAAAA,OAAO,EAAE;AANQ,CAArB;AASA,eAAe,SAASC,IAAT,CAAcC,KAAK,GAAGN,YAAtB,EAAoCO,MAApC,EAA4C;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKpB,OAAL;AAAc;AACV,eAAO,EACH,GAAGkB,KADA;AAEHL,UAAAA,eAAe,EAAE,IAFd;AAGHC,UAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyBH,MAAM,CAACE,OAAP,CAAeP,KAAxC,GAAgD,IAHpD;AAIHC,UAAAA,OAAO,EAAEI,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyBH,MAAM,CAACE,OAAP,CAAeN,OAAxC,GAAkD,IAJxD;AAKH;AACA;AACA;AACAQ,UAAAA,MAAM,EAAEJ,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyB,IAAzB,GAAgCH,MAAM,CAACE,OAAP,CAAeE;AARpD,SAAP;AAUH;;AACD,SAAKtB,OAAL;AAAc;AACV,eAAO,EACH,GAAGiB,KADA;AAEHI,UAAAA,OAAO,EAAEH,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyB,IAAzB,GAAgC,KAFtC;AAGHT,UAAAA,eAAe,EAAEM,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyB,IAAzB,GAAgC,KAH9C;AAIHR,UAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyBH,MAAM,CAACE,OAAP,CAAeP,KAAxC,GAAgD,IAJpD;AAKHC,UAAAA,OAAO,EAAEI,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyBH,MAAM,CAACE,OAAP,CAAeN,OAAxC,GAAkD,IALxD;AAMH;AACA;AACA;AACAQ,UAAAA,MAAM,EAAEJ,MAAM,CAACE,OAAP,CAAeC,OAAf,GAAyB,IAAzB,GAAgCH,MAAM,CAACE,OAAP,CAAeE;AATpD,SAAP;AAWH;;AACD,SAAKrB,UAAL;AAAiB;AACb,eAAO,EACH,GAAGgB,KADA;AAEHL,UAAAA,eAAe,EAAEM,MAAM,CAACE,OAAP,CAAeR,eAF7B;AAGHC,UAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeP,KAHnB;AAIHC,UAAAA,OAAO,EAAEI,MAAM,CAACE,OAAP,CAAeN,OAJrB,CAKH;;AALG,SAAP;AAOH;;AACD,SAAKZ,WAAL;AAAkB;AACd,eAAO,EACH,GAAGe,KADA;AAEHF,UAAAA,OAAO,EAAEG,MAAM,CAACE;AAFb,SAAP;AAIH;;AACD;AACI,aAAOH,KAAP;AA1CR;AA4CH","sourcesContent":["import { SIGN_UP, SIGN_IN, CHECK_AUTH, SET_LOADING } from \"../actionTypes\";\nimport SecureLS from \"secure-ls\";\n\nlet ls = new SecureLS({ encodingType: \"aes\", isCompression: false });\nlet _token;\nlet _user_id;\n// let _is_admin;\ntry {\n    _token = ls.get(\"token\");\n    _user_id = ls.get(\"user_id\");\n    // _is_admin = ls.get(\"is_admin\");\n} catch (error) {}\nconst initialState = {\n    isAuthenticated:\n        _token !== null && _token !== \"null\" && _token !== \"\" ? true : false,\n    token: _token || null,\n    user_id: _user_id || null,\n    // is_admin: _is_admin || false,\n    loading: false,\n};\n\nexport default function auth(state = initialState, action) {\n    switch (action.type) {\n        case SIGN_UP: {\n            return {\n                ...state,\n                isAuthenticated: true,\n                token: action.payload.success ? action.payload.token : null,\n                user_id: action.payload.success ? action.payload.user_id : null,\n                // is_admin: action.payload.success\n                //     ? action.payload.is_admin\n                //     : false,\n                errors: action.payload.success ? null : action.payload.errors\n            };\n        }\n        case SIGN_IN: {\n            return {\n                ...state,\n                success: action.payload.success ? true : false,\n                isAuthenticated: action.payload.success ? true : false,\n                token: action.payload.success ? action.payload.token : null,\n                user_id: action.payload.success ? action.payload.user_id : null,\n                // is_admin: action.payload.success\n                //     ? action.payload.is_admin\n                //     : false,\n                errors: action.payload.success ? null : action.payload.errors\n            };\n        }\n        case CHECK_AUTH: {\n            return {\n                ...state,\n                isAuthenticated: action.payload.isAuthenticated,\n                token: action.payload.token,\n                user_id: action.payload.user_id,\n                // is_admin: action.payload.is_admin,\n            };\n        }\n        case SET_LOADING: {\n            return {\n                ...state,\n                loading: action.payload\n            };\n        }\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}